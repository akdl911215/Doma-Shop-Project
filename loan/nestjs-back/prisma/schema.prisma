// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
    @@map(name: "users")
    id  String @id @default(uuid()) @db.Uuid
    userId  String  @unique
    nickname String @unique
    password  String
    name String @db.Text
    phone  String  @unique
    address String @db.Text
    isMarketing  Boolean  @default(false)
    refreshToken String? @db.Text
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    social SocialType @default(BASIC)
    mainBoard MainBoard[]
}


enum SocialType {
    KAKAO
    NAVER
    BASIC
}

model Loans {
    @@map(name: "loans")
    id  String @id @default(uuid()) @db.Uuid
    debtor String
    creditor String
    totalAmountLoan Int

}

model Debtors {
    @@map(name: "debtors")
    id  String @id @default(uuid()) @db.Uuid
}

model Creditors {
    @@map(name: "creditor")
    id  String @id @default(uuid()) @db.Uuid
}


model MainBoard {
    @@map(name: "main_board")
    id  String @id @default(uuid()) @db.Uuid
    userId  String
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
    title   String
    description String @db.Text
    createdAt    DateTime    @default(now())
    updatedAt  DateTime  @updatedAt
    mainBoardComments MainBoardComment[]
}

model MainBoardComment {
    @@map(name: "main_board_comment")
    id  String @id @default(uuid()) @db.Uuid
    mainBoardId Int
    mainBoard MainBoard @relation(fields: [mainBoardId], references: [id], onDelete: Cascade)
    userId String
    comment String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    mainBoardReComment MainBoardReComment[]
}

model MainBoardReComment {
    @@map(name: "main_board_re_comment")
    id  String @id @default(uuid()) @db.Uuid
    mainBoardCommentId String
    mainBoardComment MainBoardComment @relation(fields: [mainBoardCommentId], references: [id])
    userId String
    reComment String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
